using System;
using System.IO;
using System.Linq;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace LevelGenerator
{
    public static class Program
    {
        public static void Main()
        {
            var level = new JObject();
            level["#comment"] = "Generated by BuffedPea BP's level generator, powered by Bing AI.";
            level["objects"] = new JArray();
            var levelDefinition = new JObject();
            levelDefinition["objclass"] = "LevelDefinition";
            levelDefinition["objdata"] = new JObject();
            var objdata = (JObject)levelDefinition["objdata"];

            Console.WriteLine("BuffedPea BP's level generator, powered by Bing AI\r\nCrediting me (BP) is optional, but it will be appreciated if you do.\r\nI wrote this program with some help from Bing AI for basic logic, and I did some fixes to make sure it \r\nfit with the official PvZ 2 level format.\r\nThis tool is open sourced in GitHub, so if you unsure if this tool is safe or not, check the source code in GitHub!\r\nAdd this program to Windows Defender's exclude list, because for no reason all unsigned program including programs generated by Visual Studio is marked as malware too.\r\nEnter your StageModule (this for the lawn should ends with 'Stage'):");
            string stageModule = Console.ReadLine();
            objdata["StageModule"] = $"RTID({stageModule}@LevelModules)";

            Console.WriteLine("Enter your custom name for Description:");
            string description = Console.ReadLine();
            objdata["Description"] = description;

            Console.WriteLine("(Optional) Type a dialogue codename for first playing intro dialogue! Example: BEACH_INTRO_FIRSTLEVEL");
            string firstIntroNarrativeValue = Console.ReadLine();
            if (!string.IsNullOrWhiteSpace(firstIntroNarrativeValue))
                objdata["FirstIntroNarrative"] = firstIntroNarrativeValue;

            Console.WriteLine("(Optional) Type a dialogue codename for first playing outro dialogue! Example: EGYPT_OUTRO_GARGANTUAR");
            string firstOutroNarrativeValue = Console.ReadLine();
            if (!string.IsNullOrWhiteSpace(firstOutroNarrativeValue))
                objdata["FirstOutroNarrative"] = firstOutroNarrativeValue;

            Console.WriteLine("Do you want to make this level have a reward on completion? (1: yes, 2: no)");
            int rewardChoice;
            while (!int.TryParse(Console.ReadLine(), out rewardChoice) || rewardChoice < 1 || rewardChoice > 2)
                Console.WriteLine("Invalid input");
            if (rewardChoice == 1)
            {
                Console.WriteLine("Choose what reward that you want for the level? (1: Plants, 2: Power Ups, 3: Map of Space-Time Ness, 4: Coin Bag, 5: null (if you want to specify by yourself))");
                int rewardTypeChoice;
                while (!int.TryParse(Console.ReadLine(), out rewardTypeChoice) || rewardTypeChoice < 1 || rewardTypeChoice > 5)
                    Console.WriteLine("Invalid input");
                switch (rewardTypeChoice)
                {
                    case 1:
                        objdata["FirstRewardType"] = "unlock_plant";
                        Console.WriteLine("Enter the internal name of the plant as value for FirstRewardParam (e.g. sunflower):");
                        string plantName = Console.ReadLine();
                        objdata["FirstRewardParam"] = plantName;
                        break;
                    case 2:
                        objdata["FirstRewardType"] = "powerupgadget";
                        objdata["FirstRewardParam"] = "powerupgadget";
                        break;
                    case 3:
                        objdata["FirstRewardParam"] = "mapgadget";
                        break;
                    case 4:
                        break;
                    case 5:
                        objdata["FirstRewardType"] = "null";
                        objdata["FirstRewardParam"] = "null";
                        break;
                }
            }

            Console.WriteLine("Do you want to force to next level? (1: yes, 2: no)");
            int forceNextLevelChoice;
            while (!int.TryParse(Console.ReadLine(), out forceNextLevelChoice) || forceNextLevelChoice < 1 || forceNextLevelChoice > 2)
                Console.WriteLine("Invalid input");
            if (forceNextLevelChoice == 1)
            {
                Console.WriteLine("Enter a levelname for ForceNextLevel value:");
                string forceNextLevelValue = Console.ReadLine();
                objdata["ForceNextLevel"] = forceNextLevelValue;
            }

            Console.WriteLine("Enter any number for LevelNumber value:");
            int levelNumberValue;
            while (!int.TryParse(Console.ReadLine(), out levelNumberValue))
                Console.WriteLine("You should type a number!");
            objdata["LevelNumber"] = levelNumberValue;

            Console.WriteLine("Do you want to add the Power Ups and Plant Food unlock feature? (1: yes, 2: no)");
            int gameFeaturesChoice;
            while (!int.TryParse(Console.ReadLine(), out gameFeaturesChoice) || gameFeaturesChoice < 1 || gameFeaturesChoice > 2)
                Console.WriteLine("Invalid input");
            if (gameFeaturesChoice == 1)
                objdata["GameFeaturesToUnlock"] = new JArray { "feature_powerup_wizardfinger", "feature_powerup_flick_zombie", "feature_powerup_pinch", "feature_powerup_snowball", "feature_powerup_flamethrower", "feature_plantfood" };

            Console.WriteLine("Choose between loot status: (1: NoLoot, 2: DefaultLoot)");
            int lootChoice;
            while (!int.TryParse(Console.ReadLine(), out lootChoice) || lootChoice < 1 || lootChoice > 2)
                Console.WriteLine("Invalid input");
            objdata["Loot"] = lootChoice == 1 ? "RTID(NoLoot@LevelModules)" : "RTID(DefaultLoot@LevelModules)";

            Console.WriteLine("Enter your custom name for Name:");
            string name = Console.ReadLine();
            objdata["Name"] = name;

            objdata["NormalPresentTable"] = "egypt_normal_01";
            objdata["ShinyPresentTable"] = "egypt_shiny_01";

            Console.WriteLine("Do you want the repeat playing this level will send to worldmap again? (1: yes, 2: no)");
            int repeatPlayChoice;
            while (!int.TryParse(Console.ReadLine(), out repeatPlayChoice) || repeatPlayChoice < 1 || repeatPlayChoice > 2)
                Console.WriteLine("Invalid input");
            if (repeatPlayChoice == 1)
                objdata["RepeatPlayForceToWorldMap"] = true;

            ((JArray)level["objects"]).Add(levelDefinition);

            Console.WriteLine("Do you want this level as a Special Delivery level? (1: yes, 2: no)");
            int specialDeliveryChoice;
            while (!int.TryParse(Console.ReadLine(), out specialDeliveryChoice) || specialDeliveryChoice < 1 || specialDeliveryChoice > 2)
                Console.WriteLine("Invalid input");

            Console.WriteLine("Set your lawn mower, see your LevelModules file!, if you won't add a lawn mower just type 'nomowers':");
            string mowerName = Console.ReadLine();
            JArray modules;
            if (mowerName == "nomowers")
                modules = new JArray { $"RTID(DefaultSunDropper@LevelModules)", $"RTID(ZombiesDeadWinCon@LevelModules)", $"RTID(SeedBank@CurrentLevel)", $"RTID(DefaultZombieWinCondition@LevelModules)", $"RTID(NewWaves@CurrentLevel)" };
            else
                modules = new JArray { $"RTID(DefaultSunDropper@LevelModules)", $"RTID(ZombiesDeadWinCon@LevelModules)", $"RTID({mowerName}@LevelModules)", $"RTID(SeedBank@CurrentLevel)", $"RTID(DefaultZombieWinCondition@LevelModules)", $"RTID(NewWaves@CurrentLevel)" };

            if (specialDeliveryChoice == 1)
            {
                modules[0] = "RTID(ZombiesDeadWinCon@LevelModules)";
                modules[1] = "RTID(ConveyorBelt@CurrentLevel)";

                var conveyorSeedBankProperties = new JObject();
                conveyorSeedBankProperties["aliases"] = new JArray { "ConveyorBelt" };
                conveyorSeedBankProperties["objclass"] = "ConveyorSeedBankProperties";
                conveyorSeedBankProperties["objdata"] = new JObject();
                var conveyorSeedBankObjdata = (JObject)conveyorSeedBankProperties["objdata"];

                var random = new Random();
                var dropDelayConditions = new JArray();
                var initialPlantList = new JArray();
                string[] plantNames = new string[0];
                try
                {
                    plantNames = File.ReadAllLines("conveyorplants.txt");
                }
                catch (FileNotFoundException ex)
                {
                    Console.WriteLine("Warning: Missing or empty file, conveyorplants.txt. You must add plant typenames from PlantTypes in the OBB for example: \r\npeashooter\r\nrepeater.");
                    Console.WriteLine("\r\nExiting tool...");
                    Environment.Exit(0);
                }


                foreach (var plantName in plantNames)
                {
                    dropDelayConditions.Add(new JObject { ["Delay"] = random.Next(1, 12), ["MaxPackets"] = random.Next(1, 12) });
                    initialPlantList.Add(new JObject
                    {
                        ["MaxCount"] = random.Next(1, 12),
                        ["MaxWeightFactor"] = random.Next(1, 12),
                        ["MinCount"] = random.Next(1, 12),
                        ["MinWeightFactor"] = random.Next(1, 12),
                        ["PlantType"] = plantName,
                        ["Weight"] = random.Next(1, 12)
                    });
                }
                conveyorSeedBankObjdata["DropDelayConditions"] = dropDelayConditions;
                conveyorSeedBankObjdata["InitialPlantList"] = initialPlantList;
                conveyorSeedBankObjdata["SpeedConditions"] = new JArray { new JObject { ["MaxPackets"] = random.Next(1, 12), ["Speed"] = random.Next(1, 12) } };

                ((JArray)level["objects"]).Add(conveyorSeedBankProperties);
            }
            else
            {
                Console.WriteLine("Are you want to disable sun drop? (1: yes, 2: no)\r\nIf you choose option 2, please remove one module called \"RTID(RemoveThisPlease@.)\" because this is a bug from this tool.\r\nIf you know to fix this bug, please contribute your changes to the GitHub Repo.");
                int disableSunDropChoice;
                while (!int.TryParse(Console.ReadLine(), out disableSunDropChoice) || disableSunDropChoice < 1 || disableSunDropChoice > 2)
                    Console.WriteLine("Invalid input");
                if (disableSunDropChoice == 1)
                    modules[0] = "RTID(RemoveThisPlease@.)";

                var seedBankProperties = new JObject();
                seedBankProperties["aliases"] = new JArray { "SeedBank" };
                seedBankProperties["objclass"] = "SeedBankProperties";
                seedBankProperties["objdata"] = new JObject { ["PlantExcludeList"] = new JArray(), ["SelectionMethod"] = "chooser" };
                ((JArray)level["objects"]).Add(seedBankProperties);
            }

            objdata["Modules"] = modules;

            var waveManagerModuleProperties = new JObject();
            waveManagerModuleProperties["aliases"] = new JArray { "NewWaves" };
            waveManagerModuleProperties["objclass"] = "WaveManagerModuleProperties";
            waveManagerModuleProperties["objdata"] = new JObject { ["WaveManagerProps"] = "RTID(WaveManagerProps@CurrentLevel)" };
            ((JArray)level["objects"]).Add(waveManagerModuleProperties);

            var waveManagerProperties = new JObject();
            waveManagerProperties["aliases"] = new JArray { "WaveManagerProps" };
            waveManagerProperties["objclass"] = "WaveManagerProperties";
            waveManagerProperties["objdata"] = new JObject();
            var waveManagerObjdata = (JObject)waveManagerProperties["objdata"];

            Console.WriteLine("Enter any number for WaveCount value:");
            int waveCountValue;
            while (!int.TryParse(Console.ReadLine(), out waveCountValue))
                Console.WriteLine("You should type a number!");
            waveManagerObjdata["WaveCount"] = waveCountValue;

            Console.WriteLine("Enter any number for FlagWaveInterval value:");
            int flagWaveIntervalValue;
            while (!int.TryParse(Console.ReadLine(), out flagWaveIntervalValue))
                Console.WriteLine("You should type a number!");
            waveManagerObjdata["FlagWaveInterval"] = flagWaveIntervalValue;

            Console.WriteLine("Enter any number for ZombieCountdownFirstWaveSecs value:");
            int zombieCountdownFirstWaveSecsValue;
            while (!int.TryParse(Console.ReadLine(), out zombieCountdownFirstWaveSecsValue))
                Console.WriteLine("You should type a number!");
            waveManagerObjdata["ZombieCountdownFirstWaveSecs"] = zombieCountdownFirstWaveSecsValue;

            waveManagerObjdata["MaxNextWaveHealthPercentage"] = 0.699999988079071;
            waveManagerObjdata["MinNextWaveHealthPercentage"] = 0.550000011920928;
            waveManagerObjdata["WaveSpendingPointIncrement"] = 30;
            waveManagerObjdata["WaveSpendingPoints"] = 100;

            var waves = new JArray();
            string[] zombieNames = new string[0];
            try
            {
                zombieNames = File.ReadAllLines("zombienames.txt");
            }
            catch (FileNotFoundException ex)
            {
                Console.WriteLine("Warning: Missing or empty file, zombienames.txt. You must add plant typenames from ZombieTypes in the OBB for example: \r\npeashooter\r\nrepeater.");
                Console.WriteLine("\r\nExiting tool...");
                Environment.Exit(0);
            }
            var Zrandom = new Random();
            int minZombieCount = int.Parse(File.ReadLines("config.ini").First(line => line.StartsWith("ZombieMinRNGCount=")).Split('=')[1]);
            int maxZombieCount = int.Parse(File.ReadLines("config.ini").First(line => line.StartsWith("ZombieMaxRNGCount=")).Split('=')[1]);
            int minPlantFoodCount = int.Parse(File.ReadLines("config.ini").First(line => line.StartsWith("ZombieMinPlantFoodRNGCount=")).Split('=')[1]);
            int maxPlantFoodCount = int.Parse(File.ReadLines("config.ini").First(line => line.StartsWith("ZombieMaxPlantFoodRNGCount=")).Split('=')[1]);
            for (int i = 1; i <= waveCountValue; i++)
            {
                var spawnZombiesJitteredWaveActionProps = new JObject();
                spawnZombiesJitteredWaveActionProps["aliases"] = new JArray { $"Wave{i}" };
                spawnZombiesJitteredWaveActionProps["objclass"] = "SpawnZombiesJitteredWaveActionProps";
                spawnZombiesJitteredWaveActionProps["objdata"] = new JObject();
                var spawnZombiesObjdata = (JObject)spawnZombiesJitteredWaveActionProps["objdata"];
                spawnZombiesObjdata["AdditionalPlantfood"] = Zrandom.Next(minPlantFoodCount, maxPlantFoodCount + 1);
                spawnZombiesObjdata["Zombies"] = new JArray();
                int zombieCount = Zrandom.Next(minZombieCount, maxZombieCount + 1);
                for (int j = 0; j < zombieCount; j++)
                    ((JArray)spawnZombiesObjdata["Zombies"]).Add(new JObject { ["Row"] = Zrandom.Next(1, 6), ["Type"] = $"RTID({zombieNames[Zrandom.Next(zombieNames.Length)]}@ZombieTypes)" });
                ((JArray)level["objects"]).Add(spawnZombiesJitteredWaveActionProps);
                waves.Add(new JArray { $"RTID(Wave{i}@CurrentLevel)" });
            }
            waveManagerObjdata["Waves"] = waves;

            ((JArray)level["objects"]).Add(waveManagerProperties);

            level["version"] = 1;

            Console.WriteLine("Enter the JSON filename (without .json extension):");
            string filename = Console.ReadLine();
            File.WriteAllText(filename + ".json", JsonConvert.SerializeObject(level, Formatting.Indented));

            Console.WriteLine("Press any key to exit...");
            Console.ReadKey();
        }
    }
}
